import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchCount } from "./fetcherAPI";

import puppeteer from "puppeteer";

const initialState = {
	value: 0,
	status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getContent = createAsyncThunk(
	"fetcher/fetchCount",

	async () => {
		const url =
			"https://www.google.com/search?client=safari&rls=en&q=apple+stock+price&ie=UTF-8&oe=UTF-8";
		const browser = await puppeteer.launch({ headless: true });
		const page = await browser.newPage();
		await page.setViewport({
			width: 1920,
			height: 1080,
			deviceScaleFactor: 1,
		});
		await page.goto(url);
		// await page.screenshot({ path: "screenshot.png" });

		const element = await page.waitForSelector(
			"#knowledge-finance-wholepage__entity-summary > div.aviV4d > g-card-section > div > g-card-section > div.wGt0Bc > div.PZPZlf > span:nth-child(1) > span > span.IsqQVc.NprOob.wT3VGc",
			{ timeout: 30000 }
		);
		const title = await page.evaluate((element) => element.textContent, element);

		await browser.close();

		return title;
	}
);

export const fetcherSlice = createSlice({
	name: "fetcher",
	initialState,
	// The `reducers` field lets us define reducers and generate associated actions
	reducers: {
		increment: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
			state.value += 1;
		},
		decrement: (state) => {
			state.value -= 1;
		},
		// Use the PayloadAction type to declare the contents of `action.payload`
		incrementByAmount: (state, action) => {
			state.value += action.payload;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	// extraReducers: (builder) => {
	// 	builder
	// 		.addCase(incrementAsync.pending, (state) => {
	// 			state.status = "loading";
	// 		})
	// 		.addCase(incrementAsync.fulfilled, (state, action) => {
	// 			state.status = "idle";
	// 			state.value += action.payload;
	// 		});
	// },
});

export const { increment, decrement, incrementByAmount } = fetcherSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.fetcher.value)`
export const selectCount = (state) => state.fetcher.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
	const currentValue = selectCount(getState());
	if (currentValue % 2 === 1) {
		dispatch(incrementByAmount(amount));
	}
};

export default fetcherSlice.reducer;
